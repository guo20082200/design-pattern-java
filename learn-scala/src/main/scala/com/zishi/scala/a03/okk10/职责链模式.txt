概述：
多个trait中出现了同一个方法，而且该方法最后都调用了super.该方法名()，当类继承了这多个trait后，就可以依次调用多个trait中的此同一个方法了，这就形成一个调用链。

执行顺序为：

1.按照从右到左的顺序依次执行。
即首先从最右边的trait方法开始执行，然后依次往左执行对应的trait中的方法。
2.当所有的子特质的该方法执行完毕之后，最后会执行父特质中的此方法。
注意：在Scala中，一个类继承多个特质的情况叫叠加特质。

语法格式如下：
trait A { //父特质
	def show() //假设方法名叫: show
}
trait B extends A { //子特质, 根据需求可以定义多个.
	override def show() = {
		//具体的代码逻辑.
		super.show()
	}
}
trait C extends A {
	override def show() = {
		//具体的代码逻辑.
		super.show()
	}
}
class D extends B with C { //具体的类, 用来演示: 叠加特质.
	def 方法名() = { //这里可以是该类自己的方法, 不一定非的是show()方法.
		//具体的代码逻辑.
		super.show() //这里就构成了: 调用链.
	}
}
/*
执行顺序为:
	1. 先执行类D中的自己的方法.
	2. 再执行特质C中的show()方法.
	3. 再执行特质B中的show()方法.
	4. 最后执行特质A中的show()方法.
*/
