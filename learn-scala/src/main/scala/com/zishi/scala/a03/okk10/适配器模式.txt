适配器模式
当特质中有很多抽象方法时，而我们只需要用到其中的某一个或者某几个方法时，
不得不将该特质中的所有抽象方法给重写了，这样做很麻烦，针对这样的情况，
我们可以定义一个抽象类去继承该特质，重写特质中所有的抽象方法，方法体为空。
这时候，我们需要使用哪个方法，只需要定义类继承抽象类，重写指定方法即可。
这个抽象类就叫做：适配器类。这种设计模式（设计思想）就叫做：适配器模式。

结构如下：
trait 特质A{
    //抽象方法1
    //抽象方法2
    //抽象方法3 //...
}
abstract class 类B extends A { //适配器类
    //重写抽象方法1, 方法体为空
    //重写抽象方法2, 方法体为空
    //重写抽象方法3, 方法体为空 //...
}

class 自定义类C extends 类B {
    //需要使用哪个方法, 重写哪个方法即可.
}
