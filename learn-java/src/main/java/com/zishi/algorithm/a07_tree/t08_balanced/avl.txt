1. 什么是 平衡树
平衡树（Balanced Tree）是一种特殊的二叉搜索树，它通过自动调整节点的插入和删除操作，以保持树的平衡性。
在平衡树中，任何节点的左右子树的高度差不超过一个预定义的常数（自平衡）。
2. 平衡树的实现种类
当然，平衡树不止有 AVL 树一种，像后面出现的 2-3 树， 2-3-4 树， 红黑树等都是平衡树的实现。

3. AVL树具有以下特性：

    a.每个节点都存储一个关键字值。
    b.对于任意节点，它的左子树和右子树都是AVL树。
    c.对于任意节点，其左子树中的关键字值小于等于节点的关键字值，而其右子树中的关键字值大于等于节点的关键字值。\
        该特性展示AVL树是一棵二叉搜索树
    d.每个节点都有一个平衡因子（Balance Factor），它表示其左子树的高度减去右子树的高度。平衡因子可以是 -1、0 或 1。
    e. 对于AVL树中的每个节点，其平衡因子必须为 -1、0 或 1。如果一个节点的平衡因子不在这个范围内，那么它就不是AVL树，需要进行平衡操作以恢复平衡性。
        AVL树针对d这种情况提供了左旋和右旋的操作，以保证树结构在插入和删除操作后，始终保持自平衡（d和e）

因此，在最坏的情况下， AVL 树的查询、插入、删除操作的效率都为 O(log N)。

4. 平衡因子
定义：某节点的左子树与右子树的高度(深度)差即为该节点的平衡因子（BF,Balance Factor），
平衡二叉树中不存在平衡因子大于 1 的节点。
在一棵平衡二叉树中，节点的平衡因子只能取 0 、1 或者 -1 ，分别对应着左右子树等高，左子树比较高，右子树比较高。


5. 最小失衡子树
在新插入的结点向上查找，以第一个平衡因子的绝对值超过 1 的结点为根的子树称为最小不平衡子树。
也就是说，一棵失衡的树，是有可能有多棵子树同时失衡的。而这个时候，我们只要调整最小的不平衡子树，就能够将不平衡的树调整为平衡的树。


平衡二叉树的失衡调整主要是通过旋转最小失衡子树来实现的。根据旋转的方向有两种处理方式，左旋 与 右旋 。

旋转的目的就是减少高度，通过降低整棵树的高度来平衡。哪边的树高，就把那边的树向上旋转。

6. 左旋
（1）节点的右孩子替代此节点位置 （2）右孩子的左子树变为该节点的右子树 （3）节点本身变为右孩子的左子树
7.右旋
（1）节点的左孩子代表此节点 （2）节点的左孩子的右子树变为节点的左子树 （3）将此节点作为左孩子节点的右子树。

8. AVL树的四种插入节点方式(A为根节点)
    a.  A的左子树的左子树插入节点(LL): 执行一次右旋即可
    b.  A的右子树的右子树插入节点(RR): 执行一次左旋即可
    c.  A的左子树的右子树插入节点(LR): 先左旋，再右旋（1）对失衡节点 A 的左孩子 B 进行左旋操作，即上述 RR 情形操作。 （2）对失衡节点 A 做右旋操作，即上述 LL 情形操作。
    d.  A的右子树的左子树插入节点(RL)：先右旋，再左旋 （1）对失衡节点 A 的右孩子 C 进行右旋操作，即上述 LL 情形操作。 （2）对失衡节点 A 做左旋操作，即上述 RR 情形操作。
9. AVL树的四种删除节点方式
    a. 删除叶子节点
    b. 删除的节点只有左子树
    c. 删除的节点只有右子树
    d. 删除的节点既有左子树又有右子树
