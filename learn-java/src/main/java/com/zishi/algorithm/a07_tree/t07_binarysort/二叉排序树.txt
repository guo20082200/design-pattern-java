接下来我们就重点介绍一下二叉排序树中的删除方法。

1. 二叉排序树
特性：
所有的左子树的值小于根节点
所有的右子树的值大于根节点

2. 二叉树中节点之间是有序的，因此在二叉排序树中直接对节点进行修改是不被允许的
通常在二叉排序树中不设置修改的方法，而是设置一个按值查找并删除的方法，

3. 二叉树的删除方法：
    3.1 叶子节点的删除
    如果删除的目标是一个叶子节点，那么事情就简单了，因为叶子节点没有子树，所以叶子节点的删除就是简单的删除，把它删了，完全不会影响到整棵树的平衡性，
    因此理论上将叶子节点的删除最为简单，那么接下来让我们理一下叶子节点的删除步骤：
        a.找到要删除的节点，我们将其命名为targetNode
        b.找到要删除的节点的父节点，我们命名为parent
        c.判断targeNode节点是parent节点的左子节点还是右子节点
        d.根据第三步的结果将其parent的左孩子或者右孩子置为null，从而删除目标节点，若是左子节点：parent.left = null;若是右子节点：parent.right = null

    3.2 非叶子节点的删除(只有一个孩子节点)
        a.找到要删除的节点，我们命名为targetNode
        b.找到删除节点的父节点，我们命名为parent
        c.找到要删除节点的唯一子树的根节点，这个节点可能是将被删除的节点的左孩子节点或者右孩子节点，但由于它是唯一的，所以我们找到之后直接命名为child
        d.判断targetNode是其父节点parent的左子节点还是右子节点，如果是左子节点：parent.left = target.child; 如果是右子节点：parent.right = target.child

    3.3 非叶子节点的删除(有两个孩子节点)
        使用左子树
        a.找到将被删除节点的左子树中的最大值
        b.将这个最大值保存，并删除这个节点
        c.将我们保存到的左子树最大值替换给将被删除的节点的值
        使用右子树
        a.找到将被删除节点的右子树中的最小值
        b.将这个最小值保存，并删除这个节点
        c.将我们保存的右子树的最小值替换给将被删除节点的值
    3.4 根节点的删除
        当我们删除的节点是根节点时，我们需要先根据其parent来确认一下将要删除的节点是否时根节点，
        如果它是根节点，那么它的parent将是null，
        因此只要我们得到了一个parent值，其为null的话，那么我嗯将要删除的节点就是根节点，
        当树中只有一个节点的时候，也就是根节点就是叶子节点的时候我，我们仅需要将root置为null即可，
        如果当前根节点只有一个子树，我们将其子树的根节点赋予给root即可(root是当前结构内的根指针，是管理类中的字段)，
        而根节点有两个节点的时候，使用以上算法并没有什么影响，因为根字段的指向并没有变化，变化的是值，
        而被删除的节点时另外的节点，时右子树中值最小的节点，或者左子树中值最大的节点。

