概述：
在Scala中，我们可以先定义一个操作中的算法骨架，而将算法的一些步骤延迟到子类当中去，
使得子类不改变算法结构的情况下重定义该算法的某些特定步骤，这就是：模板方法设计。

优点：
1.扩展性更强。
父类中封装了公共的部分，而可变的部分交给子类来实现。
2.符合开闭原则。
部分方法是由子类实现的，因此子类可以通过扩展方式增加相应的功能。


缺点：
1.类的个数增加，导致系统更加庞大，设计也更加抽象。
因为要对每个不同的实现都需要定义一个子类。
2.提高了代码阅读的难度。
父类中的抽象方法由子类实现，子类执行的结果会影响父类的结果，这是一种反向的控制结构。


格式如下：
class A { //父类, 封装的是公共部分
	def 方法名(参数列表) = { //具体方法, 在这里也叫: 模板方法
		//步骤1, 已知.
		//步骤2, 未知, 调用抽象方法
		//步骤3, 已知.
		//步骤n...
	}
//抽象方法
}
class B extends A {
	//重写抽象方法
}

注意：抽象方法的个数要根据具体的需求来定，并不一定只有一个，也可以是多个。
